{"version":3,"sources":["components/CampaignItem.js","components/CampaignTable.js","components/Header.js","components/App.js","i18next.js","serviceWorker.js","index.js"],"names":["CampaignItem","props","current","moment","startOf","dateDiff","duration","item","createdOn","diff","asDays","dateDiffConversion","Math","trunc","className","format","src","process","image_url","name","region","style","width","trigger","position","modal","close","pricing","map","price","onClick","selected","editing","Date","parse","newCreatedOn","onChange","handleChange","inline","editCampaign","onSelect","CampaignTable","state","campaigns","filteredCampaigns","apiUrl","bind","json","localStorage","getItem","JSON","this","setState","axios","get","response","data","stringify","setItem","date","console","log","id","forEach","campaign","index","setJson","alert","filterOption","filter","key","Component","Header","useState","setIsSmallScreen","useEffect","mediaQuery","window","matchMedia","addListener","handleMediaQueryChange","removeListener","matches","alt","App","useTranslation","t","i18n","handleClick","lang","changeLanguage","marginTop","marginRight","color","cursor","defaultIndex","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","backend","loadPath","debug","whiteList","interpolation","escapeValue","Boolean","location","hostname","match","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57d7cd61.chunk.js","sourcesContent":["import React from 'react';\n// moment library to do date calculations\nimport moment from 'moment';\nimport Popup from \"reactjs-popup\";\n// library to select date when user wants to change date of campaign\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\nconst CampaignItem = (props) => {\n\t// get current date using moment.js to compare status of campaign\n\tlet current = moment().startOf('day');\n\t// calculate the diff in days from current date if in past will multiply by -1\n\tlet dateDiff = moment.duration(moment(props.item.createdOn,\"YYYY-MM-DD\").diff(current)).asDays();\n\t// convert diff in days to whole number value \n\tlet dateDiffConversion = Math.trunc(dateDiff);\n\treturn(\n\t\t  <tr>\n\t\t    <td className=\"display-grid\">\n\t\t      <span className=\"fw-500 fs-14 heading-color\">{moment(props.item.createdOn).format(\"MMM YYYY,Do\")}</span>\n\t\t      <span className=\"fs-12 fs-italic sub-heading-color\">\n\t\t        {dateDiff > 0 &&  `${dateDiffConversion} days ahead`}\n\t\t        {dateDiff < 0 &&  `${dateDiffConversion*-1} days ago`}\n\t\t        {dateDiff === 0 &&  \"live\"}\n\t\t      </span>\n\t\t    </td>\n\t\t    <td>\n\t\t      <div className=\"display-flex\">\n\t\t        <img className=\"games-image\" src={`${process.env.PUBLIC_URL}/${props.item.image_url}`}/>\n\t\t        <span className=\"display-grid pl-18\">\n\t\t          <span className=\"fw-500 fs-14 heading-color\">{props.item.name}</span>\n\t\t          <span className=\"fs-12 fs-italic sub-heading-color\">{props.item.region}</span>\n\t\t        </span>\n\t\t      </div>\n\t\t    </td>\n\t\t    <td>\n\t\t      <div>\n\t\t         <img className=\"pricing-image\" src={`${process.env.PUBLIC_URL}/assets/Price.png`}/>\n\t\t         <Popup  style={{width:'20%'}} trigger={<button className=\"ml-12 heading-color fs-12\"> View Pricing</button>} position=\"right center\" modal>\n                 \t{close => (\n                 \t<div>\n                 \t\t<div>\n                 \t\t\t<img className=\"popup-image\" src={`${process.env.PUBLIC_URL}/${props.item.image_url}`}/>\n                 \t\t\t<div className=\"position-relative ml-28percent\">\n\t                 \t\t\t<p className=\"fw-500 fs-14 heading-color position-absolute bottom-0 left-8\">{props.item.name}</p>\n\t\t\t                    <span className=\"fs-12 fs-italic sub-heading-color position-absolute bottom-0 left-8\">{props.item.region}</span>\n                 \t\t\t</div>\n                 \t\t</div>\n                 \t\t<h5 className=\"mb-10 mt-24 heading-color\">Pricing</h5>\n             \t\t\t{props.item.pricing.map((item)=>{\n\t\t\t\t\t    return(\n\t\t\t\t\t\t    <div className=\"mb-20\">\n\t\t\t\t\t\t    \t<span className=\"sub-heading-color\">{item.name}</span>\n\t\t\t\t\t\t    \t<span className=\"heading-color fw-500 mr-20 float-right\">$ {item.price}</span> \n\t\t\t\t\t\t    </div>\n\t\t\t\t\t    );\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<button className=\"button button-primary\" onClick={() => {close()}}>\n\t\t\t\t\t        Close\n\t\t\t\t\t        </button>\n\t\t\t\t        </div>\n                 \t</div>\n                 \t)}\n  \t\t\t\t </Popup>\n\t\t      </div>\n\t\t    </td>\n\t\t    <td>\n\t\t\t    <div className=\"display-flex\">\n\t\t\t\t    <div>\n\t\t\t\t      <img className=\"actions-image\" src={`${process.env.PUBLIC_URL}/assets/file.png`}/>\n\t\t\t\t      <span className=\"ml-10 heading-color fs-12\">CSV</span>\n\t\t\t\t    </div>\n\t\t\t\t    <div className=\"ml-20\">\n\t\t\t\t      <img className=\"actions-image ml-18\" src={`${process.env.PUBLIC_URL}/assets/statistics-report.png`}/>\n\t\t\t\t      <span className=\"ml-10 heading-color fs-12\">Report</span>\n\t\t\t\t    </div>\n\t\t\t\t    <div> \n\t\t\t\t      <img className=\"actions-image ml-18\" src={`${process.env.PUBLIC_URL}/assets/calendar.png`}/>\n\t\t\t\t      \t<Popup  style={{width:'20%'}} trigger={<button className=\"ml-12 heading-color fs-12\">Schedule Again</button>} position=\"right center\" modal>\n\t\t\t\t\t\t{close => (\n\t\t\t\t\t\t\t<div>\t\n\t\t\t\t\t\t\t\t<h6 className=\"text-center heading-color reshedule-campaign\">Reschedule Campaign</h6>\n\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t<DatePicker selected={props.editing ? Date.parse(props.newCreatedOn) : Date.parse(props.item.createdOn)} onChange={props.handleChange} inline/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t<button className=\"button button-primary save-schedule-date\" onClick={props.editCampaign} onSelect={() => {close()}}>\n\t\t\t\t\t\t\t        Save\n\t\t\t\t\t\t\t        </button>\n\t\t\t\t\t\t        </div>\n\t\t\t\t\t        </div>\n\t\t\t\t        )}\n\t\t  \t\t\t  </Popup>\n\t\t  \t\t\t</div>\n\t\t  \t\t</div>\n\t\t    </td>\n\t\t  </tr>\n\t);\n};\n\nexport default CampaignItem;","import React,{Component} from 'react';\nimport moment from 'moment';\nimport Popup from \"reactjs-popup\";\nimport DatePicker from \"react-datepicker\";\nimport CampaignItem from './CampaignItem';\nimport axios from 'axios';\nimport { useTranslation } from 'react-i18next';\nimport \"./App.js\";\n\n\nclass CampaignTable extends Component{\n\tconstructor(props){\n\t    super(props);\n\t    this.state = {\n\t      campaigns : [],\n\t      filteredCampaigns : [],\n\t      newCreatedOn : '',\n\t      editing:false,\n\t\t  current : moment().startOf('day')\n\t    }\n\t    // mocki.io api is used to get the starting data\n\t    this.apiUrl ='https://api.mocki.io/v1/7db13b8a';\n\t    this.handleChange = this.handleChange.bind(this);\n\t    this.editCampaign = this.editCampaign.bind(this);\n    };\n\n    // get the data from api if not stored in local storage and then store in localstorage \n    // as soon as the component is mounted\n    async componentDidMount(){\n    const json = localStorage.getItem(\"campaigns\");\n    const campaigns = JSON.parse(json);\n\t    if (campaigns) {\n\t      this.setState(() => ({ campaigns }));\n\t    }else{\n\t    \tconst response = await axios.get(`${this.apiUrl}/campaigns`);\n\t\t    this.setState({\n\t\t      campaigns:response.data.data\n\t\t    });\n\t\t    const json = JSON.stringify(response.data.data);\n            localStorage.setItem(\"campaigns\", json);\n\t    }\n    }\n\n    // save the new selected campaign date in setstate\n    async handleChange(date){\n    \tconsole.log(\"date\",date);\n\t    this.setState({\n\t      newCreatedOn: date,\n\t      editing:true\n\t    });\n       console.log(this.state.newCreatedOn);\n    }\n\n    // get the data from local storage and then save the changed date of that particular\n    //campaign using local storage\n    editCampaign(id){\n    \tconst json = localStorage.getItem(\"campaigns\");\n        const campaigns = JSON.parse(json);\n\t    campaigns.forEach((campaign, index) => {\n\t\t\tif (campaign.id === id) {\n\t\t\t\tcampaign.createdOn = this.state.newCreatedOn;\n\t\t\t}\n        });\n\t    this.setState({\n\t      campaigns : campaigns,\n\t      editing : false,\n\t      newCreatedOn : ''\n\t    });\n\t    const setJson = JSON.stringify(campaigns);\n        localStorage.setItem(\"campaigns\", setJson);\n        alert(\"Campaign has been rescheduled on the selected date.\");\n    }\n\n    render(){\n    // get the upcoming campaigns in upcoming  campaigns tab if datediffconversion > 0\n    if(this.props.filterOption === \"upcoming\"){\n\t    this.state.filteredCampaigns = this.state.campaigns.filter((item)=>{\n\t\t \tlet dateDiff = moment.duration(moment(item.createdOn,\"YYYY-MM-DD\").diff(this.state.current)).asDays();\n\t        let dateDiffConversion = Math.trunc(dateDiff);\n\t        return dateDiffConversion > 0\n\t    });\n\t}\n\n\t// get the live campaigns in live  campaigns tab if datediffconversion === 0\n    if(this.props.filterOption === \"live\"){\n\t    this.state.filteredCampaigns = this.state.campaigns.filter((item)=>{\n\t\t \tlet dateDiff = moment.duration(moment(item.createdOn,\"YYYY-MM-DD\").diff(this.state.current)).asDays();\n\t        let dateDiffConversion = Math.trunc(dateDiff);\n\t        return dateDiffConversion === 0\n\t    });\n\t}\n\n\t// get the upcoming campaigns in upcoming  campaigns tab if datediffconversion < 0\n    if(this.props.filterOption === \"past\"){\n\t    this.state.filteredCampaigns = this.state.campaigns.filter((item)=>{\n\t\t \tlet dateDiff = moment.duration(moment(item.createdOn,\"YYYY-MM-DD\").diff(this.state.current)).asDays();\n\t        let dateDiffConversion = Math.trunc(dateDiff);\n\t        return dateDiffConversion < 0\n\t    });\n    }\n\n    // get each campaighn item in the table using map function\n\treturn(\n\t<table>\n\t    <thead>\n\t      <tr>\n\t        <th>DATE</th>\n\t        <th>CAMPAIGN</th>\n\t        <th>VIEW</th>\n\t        <th>ACTIONS</th>\n\t      </tr>\n\t    </thead>\n\t    <tbody>\n\t    {this.state.filteredCampaigns.map((item,index)=>{\n        return <CampaignItem\n        key={item.id}\n        item = {item}\n        handleChange={this.handleChange}\n        editing={this.state.editing}\n        newCreatedOn={this.state.newCreatedOn}\n        editCampaign = {() => {this.editCampaign(item.id); }}\n        />\n\t    })\n\t    }\n\t    </tbody>\n\t</table>  \n    );\n    }\n};\n\nexport default CampaignTable;","import React, { useState, useEffect } from \"react\";\nimport \"./Header.css\";\n\nexport default function Header() {\n  // show table in proper format on mobile screen using useEffect\n  const [isNavVisible, setNavVisibility] = useState(false);\n  const [isSmallScreen, setIsSmallScreen] = useState(false);\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(max-width: 700px)\");\n    mediaQuery.addListener(handleMediaQueryChange);\n    handleMediaQueryChange(mediaQuery);\n\n    return () => {\n      mediaQuery.removeListener(handleMediaQueryChange);\n    };\n  }, []);\n\n  const handleMediaQueryChange = mediaQuery => {\n    if (mediaQuery.matches) {\n      setIsSmallScreen(true);\n    } else {\n      setIsSmallScreen(false);\n    }\n  };\n\n  // header above the page with bluestacks logo\n  return (\n    <header className=\"Header\">\n      <img src={`${process.env.PUBLIC_URL}/assets/bluestacks.png`} className=\"Logo\" alt=\"logo\" />\n    </header>\n  );\n}\n","import axios from 'axios';\nimport React,{Component} from 'react';\nimport CampaignTable from './CampaignTable';\n// react-tabs library to make tabs\nimport {Tab, Tabs, TabList, TabPanel} from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport Header from './Header';\nimport './App.css';\n// i18-next to use translations\nimport { useTranslation } from 'react-i18next';\n\nconst App = () => {\n    const { t, i18n } = useTranslation();\n    function handleClick(lang){\n      i18n.changeLanguage(lang);\n    }\n\n    // language selector using react-i18next\n    return (\n      <div className=\"App\">\n        <div className=\"lang-div\">\n          <label className=\"lang-label\">Select Language :</label>\n          <button style={{ marginTop: '10px',marginRight: '15px',color: '#069',cursor: 'pointer'}} onClick={() => handleClick('en')}>\n            English\n          </button>\n          <button style={{color: '#069',cursor: 'pointer'}} onClick={() => handleClick('german')}>\n            German\n          </button>\n        </div>\n        <Header />\n        <div className=\"container overflowx-auto\">\n        <Tabs defaultIndex={1} onSelect={index => console.log(index)}>\n        <h4 className=\"table-heading\">Manage Campaigns</h4>\n          <TabList>\n            <Tab>{t('tabs.1')}</Tab>\n            <Tab>{t('tabs.2')}</Tab>\n            <Tab>{t('tabs.3')}</Tab>\n          </TabList>\n          <TabPanel>\n            <CampaignTable filterOption=\"upcoming\"/>\n          </TabPanel>\n          <TabPanel>\n            <CampaignTable filterOption=\"live\"/>\n          </TabPanel>\n          <TabPanel>\n            <CampaignTable filterOption=\"past\"/>\n          </TabPanel>\n        </Tabs>\n        </div>\n      </div>\n    );\n  }\n\nexport default App;","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nconst lng = [\"en\",\"german\"];\n\ni18n\n  .use(Backend)\n  // detect user language\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  .init({\n    fallbackLng: 'en',\n     backend: {\n      loadPath:  '/public/locales/{{lng}}/{{ns}}.json'\n    },\n    debug: true,\n    whiteList : lng,\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    }\n  });\n\n\nexport default i18n;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Suspense} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js';\nimport './i18next';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<Suspense fallback={(<div>Loading~~~~~</div>)}>\n\t\t<App />\n\t</Suspense>\n, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}